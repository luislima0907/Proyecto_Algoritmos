FINALIZ HASTA LA LINEA 219

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.recycleview import RecycleView
from kivy.uix.recycleview.views import RecycleDataViewBehavior
from kivy.uix.label import Label
from kivy.properties import BooleanProperty
from kivy.uix.recycleboxlayout import RecycleBoxLayout
from kivy.uix.behaviors import FocusBehavior
from kivy.uix.recycleview.layout import LayoutSelectionBehavior
from kivy.uix.popup import Popup

inventario=[
	{'Codigo': '111', 'Nombre': 'leche 1L', 'Precio': 20.0, 'Cantidad': 20},
	{'Codigo': '222', 'Nombre': 'cereal 500g', 'Precio': 50.5, 'Cantidad': 15}, 
	{'Codigo': '333', 'Nombre': 'yogurt 1L', 'Precio': 25.0, 'Cantidad': 10},
	{'Codigo': '444', 'Nombre': 'helado 2L', 'Precio': 80.0, 'Cantidad': 20},
	{'Codigo': '555', 'Nombre': 'alimento para perro 20kg', 'Precio': 750.0, 'Cantidad': 5},
	{'Codigo': '666', 'Nombre': 'shampoo', 'Precio': 100.0, 'Cantidad': 25},
	{'Codigo': '777', 'Nombre': 'papel higiénico 4 rollos', 'Precio': 35.5, 'Cantidad': 30},
	{'Codigo': '888', 'Nombre': 'jabón para trastes', 'Precio': 65.0, 'Cantidad': 5},
	{'Codigo': '999', 'Nombre': 'refresco 600ml', 'Precio': 15.0, 'Cantidad': 10}
]

class SelectableRecycleBoxLayout(FocusBehavior, LayoutSelectionBehavior,
                                 RecycleBoxLayout):
    ''' Adds selection and focus behaviour to the view. '''
    touch_deselect_last = BooleanProperty(True)


class SelectableBoxLayout(RecycleDataViewBehavior, BoxLayout):
    ''' Add selection support to the Label '''
    index = None
    selected = BooleanProperty(False)
    selectable = BooleanProperty(True)

    def refresh_view_attrs(self, rv, index, data):
        self.index = index
        self.ids['_Hashtag'].text = str(1+index)
        self.ids['_Articulo'].text = data['Nombre'].capitalize()
        self.ids['_Cantidad'].text = str(data['cantidad_carrito'])
        self.ids['_Precio_por_Articulo'].text = str("{:.2f}".format(data['Precio']))
        self.ids['_Precio'].text = str("{:.2f}".format(data['precio_total']))
        return super(SelectableBoxLayout, self).refresh_view_attrs(
            rv, index, data)

    def on_touch_down(self, touch):
        ''' Add selection on touch down '''
        if super(SelectableBoxLayout, self).on_touch_down(touch):
            return True
        if self.collide_point(*touch.pos) and self.selectable:
            return self.parent.select_with_touch(self.index, touch)

    def apply_selection(self, rv, index, is_selected):
        ''' Respond to the selection of items in the view. '''
        self.selected = is_selected
        if is_selected:
            print("selection changed to {0}".format(rv.data[index]))
        else:
            print("selection removed for {0}".format(rv.data[index]))


class SelectableBoxLayoutPopup(RecycleDataViewBehavior, BoxLayout):
    ''' Add selection support to the Label '''
    index = None
    selected = BooleanProperty(False)
    selectable = BooleanProperty(True)

    def refresh_view_attrs(self, rv, index, data):
        self.index = index
        self.ids['_Codigo'].text = data['Codigo']
        self.ids['_Articulo'].text = data['Nombre'].capitalize()
        self.ids['_Cantidad'].text = str(data['Cantidad'])
        self.ids['_Precio'].text = str("{:.2f}".format(data['Precio']))
        return super(SelectableBoxLayoutPopup, self).refresh_view_attrs(
            rv, index, data)

    def on_touch_down(self, touch):
        ''' Add selection on touch down '''
        if super(SelectableBoxLayoutPopup, self).on_touch_down(touch):
            return True
        if self.collide_point(*touch.pos) and self.selectable:
            return self.parent.select_with_touch(self.index, touch)

    def apply_selection(self, rv, index, is_selected):
        ''' Respond to the selection of items in the view. '''
        self.selected = is_selected
        if is_selected:
            rv.data[index]['Seleccionado'] = True
        else:
            rv.data[index]['Seleccionado'] = False


class RV(RecycleView):
    def __init__(self, **kwargs):
        super(RV, self).__init__(**kwargs)
        self.data = []
    
    def agregar_articulo(self, articulo):
        articulo['Seleccionado']=False
        indice = -1
        if self.data:
            for i in range(len(self.data)):
                if articulo['Codigo'] == self.data[i]['Codigo']:
                    indice = i
            if indice >= 0:
                self.data[indice]['cantidad_carrito']+=1
                self.data[indice]['precio_total'] = self.data[indice]['Precio']*self.data[indice]['cantidad_carrito']
                self.refresh_from_data()
            else:
                self.data.append(articulo)
        else:
            self.data.append(articulo)
    
    def eliminar_articulo(self):
        indice = self.articulo_seleccionado()
        precio = 0
        if indice >= 0:
            precio = self.data[indice]['precio_total']
            self.data.pop(indice)
            self.refresh_from_data()
        return precio
    
    def articulo_seleccionado(self):
        indice = -1
        for i in range(len(self.data)):
            if self.data[i]['Seleccionado']:
                indice = i
                break
        return indice

class ProductoPorNombrePopup(Popup):
    def __init__(self, input_nombre, agregar_producto_callback, **kwargs):
        super(ProductoPorNombrePopup, self).__init__(**kwargs)
        self.input_nombre = input_nombre
        self.agregar_producto = agregar_producto_callback
    
    def mostrar_articulos(self):
        self.open()
        for nombre in inventario:
            if nombre['Nombre'].lower().find(self.input_nombre) >= 0:
                producto = {'Codigo': nombre['Codigo'], 'Nombre': nombre['Nombre'], 'Precio': nombre['Precio'], 'Cantidad': nombre['Cantidad']}
                self.ids.RVS.agregar_articulo(producto)
    
    def seleccionar_articulo(self):
        indice = self.ids.RVS.articulo_seleccionado()
        if indice >= 0:
            _articulo = self.ids.RVS.data[indice]
            articulo = {}
            articulo['Codigo'] = _articulo['Codigo']
            articulo['Nombre'] = _articulo['Nombre']
            articulo['Precio'] = _articulo['Precio']
            articulo['cantidad_carrito'] = 1
            articulo['cantidad_inventario'] = _articulo['Cantidad']
            articulo['precio_total'] = _articulo['Precio']
            if callable(self.agregar_producto):
                self.agregar_producto(articulo)
            self.dismiss()


class VentasWindow(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.Total = 0.0
    
    def agregar_producto_codigo(self, codigo):
        for producto in inventario:
            if codigo==producto['Codigo']:
                articulo = {}
                articulo['Codigo'] = producto['Codigo']
                articulo['Nombre'] = producto['Nombre']
                articulo['Precio'] = producto['Precio']
                articulo['cantidad_carrito'] = 1
                articulo['cantidad_inventario'] = producto['Cantidad']
                articulo['precio_total'] = producto['Precio']
                self.Total+=articulo['Precio']
                self.ids.Sub_Total.text = 'Q '+ "{:.2f}".format(self.Total)
                self.ids.RVS.agregar_articulo(articulo)
                self.agregar_producto(articulo)
                self.ids.Buscar_Codigo.text = ''
                break
    
    def agregar_producto_nombre(self, nombre):
        self.ids.Buscar_Nombre.text = ''
        popup = ProductoPorNombrePopup(nombre, self.agregar_producto)
        popup.mostrar_articulos()
        
    def agregar_producto(self, articulo):
        self.Total+=articulo['Precio']
        self.ids.Sub_Total.text = 'Q '+ "{:.2f}".format(self.Total)
        self.ids.RVS.agregar_articulo(articulo)    
    
    def eliminar_producto(self):
        menos_precio = self.ids.RVS.eliminar_articulo()
        self.Total-=menos_precio
        self.ids.Sub_Total.text = 'Q '+ "{:.2f}".format(self.Total)
        
    def modificar_producto(self):
        print("modificar presionado")
    
    def pagar(self):
        print("He pagado")
        
    def nueva_compra(self):
        print("Nueva compra")  
    
    def admin(self):
        print("Admin presionado")  

    def signout(self):
        print("Signout presionado")  

class VentasApp(App):
    def build(self):
        return VentasWindow()
    
if __name__ == "__main__":
    VentasApp().run()

AQUI TERMINA LO DE PYTHON

AQUI INICIA LO DE KIVY

#:import hex kivy.utils.get_color_from_hex

<BotonOscuro@Button>:
    background_normal: ''
    background_color: hex('#393939')

<LabelOscuro@Label>:
    canvas.before:
        Color:
            rgba: hex('#393939')
        Rectangle:
            size: self.size
            pos: self.pos

<SelectableBoxLayout>:
    # Draw a background to indicate selection
    canvas.before:
        Color:
            rgba: hex('#C9F3EF') if self.selected else hex('#F0F0F0')
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        id: _Hashtag
        size_hint_x: .1
        color: (0,0,0,1)
    Label:
        id: _Articulo
        size_hint_x: .5
        color: (0,0,0,1)
    Label:
        id: _Cantidad
        size_hint_x: .1
        color: (0,0,0,1)
    Label:
        id: _Precio_por_Articulo
        size_hint_x: .15
        color: (0,0,0,1)
    Label:
        id: _Precio
        size_hint_x: .15
        color: (0,0,0,1)

<SelectableBoxLayoutPopup>:
    canvas.before:
        Color:
            rgba: hex('#7A9B87') if self.selected else hex('#393939')
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
        id: _Codigo
        size_hint_x: .25
    Label:
        id: _Articulo
        size_hint_x: .5
    Label:
        id: _Cantidad
        size_hint_x: .1
    Label:
        id: _Precio
        size_hint_x: .15



<RV>:
    SelectableRecycleBoxLayout:
        default_size: None, dp(36)
        default_size_hint: 1, None
        size_hint_y: None
        height: self.minimum_height
        orientation: 'vertical'
        multiselect: False
        touch_multiselect: False

<ProductoPorNombrePopup>:
    size_hint: .5, .55
    title: 'Productos'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: .8
            orientation: 'vertical'
            BoxLayout:
                size_hint_y: .1
                Label:
                    text: 'Codigo'
                    size_hint_x: .25
                Label:
                    text: 'Nombre'
                    size_hint_x: .5
                Label:
                    text: 'Cantidad'
                    size_hint_x: .1
                Label:
                    text: 'Precio'
                    size_hint_x: .15
            RV:
                viewclass: 'SelectableBoxLayoutPopup'
                id: RVS
        BoxLayout:
            size_hint_y: .2
            Button:
                text: 'Seleccionar'
                on_release: root.seleccionar_articulo()
            Button:
                text: 'Salir'
                on_release: root.dismiss()


<VentasWindow>:
    canvas.before:
        Color:
            rgba: hex('#24B0AE')
        Rectangle:
            size: self.size
            pos: self.pos
    orientation: 'vertical'
    BoxLayout:
        size_hint_y: .1
        spacing: .5
        Label:
            id: Bienvenido_label
            size_hint_x: .25
            text: 'Bienvenido: '
            color: hex('#000000')
        GridLayout:
            size_hint_x: .25
            rows: 2
            cols: 2
            Label:
                text: 'Fecha: '
                color: hex('#000000')
            Label:
                id: Fecha
                color: hex('#000000')
            Label:
                text: 'Hora: '
                color: hex('#000000')
            Label:
                id: Hora
                color: hex('#000000')
        Label:
            size_hint_x: .2
        BotonOscuro:
            id: Admin_Boton
            size_hint_x: .15
            text: 'Admin'
            on_release: root.admin()
        BotonOscuro:
            id: Signout_Boton
            size_hint_x: .15
            text: 'Signout'
            on_release: root.signout()
    BoxLayout:
        canvas.before:
            Color:
                rgba: hex('#FFFFFF')
            Rectangle:
                size: self.size
                pos: self.pos
        size_hint_y: .87
        spacing: .5
        BoxLayout:
            size_hint_x: .7
            orientation: 'vertical'
            spacing: .5
            GridLayout:
                spacing: .5
                size_hint_y: .1
                rows: 2
                cols: 2
                LabelOscuro:
                    text: 'Buscar por Código'
                LabelOscuro:
                    text: 'Buscar por Nombre'
                TextInput:
                    id: Buscar_Codigo
                    multiline: False
                    on_text_validate: root.agregar_producto_codigo(self.text)
                TextInput:
                    id: Buscar_Nombre
                    multiline: False
                    on_text_validate: root.agregar_producto_nombre(self.text)
            BoxLayout:
                size_hint_y: .8
                orientation: 'vertical'
                BoxLayout:
                    size_hint_y: .05
                    spacing: .5
                    LabelOscuro:
                        text: '#'
                        size_hint_x: .1
                    LabelOscuro:
                        text: 'Artículo'
                        size_hint_x: .5
                    LabelOscuro:
                        text: 'Cantidad'
                        size_hint_x: .1
                    LabelOscuro:
                        text: 'Precio por Artículo'
                        size_hint_x: .15
                    LabelOscuro:
                        text: 'Total'
                        size_hint_x: .15
                RV:
                    viewclass: 'SelectableBoxLayout'
                    id: RVS
            BoxLayout:
                size_hint_y: .1
                spacing: .5
                BotonOscuro:
                    text: 'Borrar Artículo'
                    on_release: root.eliminar_producto()
                BotonOscuro:
                    text: 'Cambiar Cantidad'
                    on_release: root.modificar_producto()

        BoxLayout:
            size_hint_x: .3
            orientation: 'vertical'
            canvas.before:
                Color:
                    rgba: hex('#BCD3D2')
                Rectangle:
                    size: self.size
                    pos: self.pos
            GridLayout:
                canvas.before:
                    Color:
                        rgba: hex('#000000')
                    Rectangle:
                        size: self.size
                        pos: self.pos
                size_hint_y: .4
                rows: 2
                cols: 2
                Label:
                    text: 'Sub-Total'
                Label:
                    id: Sub_Total
                    text: '0.00'
                Label:
                    text: 'Total'
                Label:
                    id: Total
                    text: '0.00'
            BoxLayout:
                size_hint_y: .6
                orientation: 'vertical'
                spacing: .5
                Label:
                    id: Notificacion_Fall
                    size_hint_y: .25
                Label:
                    id: Notificacion_Exito
                    size_hint_y: .25
                BotonOscuro:
                    size_hint_y: .25
                    id: pagar
                    text: 'Pagar'
                    on_release: root.pagar()
                BotonOscuro:
                    size_hint_y: .25
                    id: Nueva_Compra
                    text: 'Nueva compra'
                    on_release: root.nueva_compra()
    BoxLayout:
        size_hint_y: .03

AQUI TERMINA KIVY

AQUI INICIA SQL LITE 3

LINEA 98    WHERE
      username = ?
LINEA 100    """
